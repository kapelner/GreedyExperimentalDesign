% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gurobi_numerical_optimization_search.R
\name{initGurobiNumericalOptimizationExperimentalDesignObject}
\alias{initGurobiNumericalOptimizationExperimentalDesignObject}
\title{Begin Gurobi Optimized Search}
\usage{
initGurobiNumericalOptimizationExperimentalDesignObject(
  X = NULL,
  objective = "mahal_dist",
  Kgram = NULL,
  num_cores = 2,
  w_0 = NULL,
  time_limit_sec = 2 * 60,
  verbose = TRUE,
  gurobi_params = list()
)
}
\arguments{
\item{X}{The design matrix with $n$ rows (one for each subject) and $p$ columns 
(one for each measurement on the subject). This is the design matrix you wish 
to search for a more optimal design.}

\item{objective}{The objective function to use when searching design space. This is a string
with valid values "\code{mahal_dist}" (the default) or "\code{kernel}".}

\item{Kgram}{If the \code{objective = kernel}, this argument is required to be an \code{n x n} matrix whose
entries are the evaluation of the kernel function between subject i and subject j. Default is \code{NULL}.}

\item{num_cores}{Number of cores to use during search. Default is \code{2}.}

\item{w_0}{The initial starting location (optional).}

\item{time_limit_sec}{The maximum amount of time the optimizer can run for in seconds. The default is \code{2 * 60}.}

\item{verbose}{Should Gurobi log to console? Default is \code{TRUE}.}

\item{gurobi_params}{A list of optional parameters to be passed to Gurobi (see their documentation online).}
}
\value{
A list object which houses the results from Gurobi. Depending on the \code{gurobi_parms},
							the data within will be different. The most relevant tags are \code{x} for the best found solution and \code{objval}
							for the object
}
\description{
This method creates an object of type optimal_experimental_design and will immediately initiate
a search through $1_{T}$ space for forced balance designs. Make sure you setup Gurobi properly first. This means
applying for a license, downloading, installing, registering it on your computer using the \code{grbgetkey} command
with the license file in the default directory. Then, in R, add it to the path within R using something like 
\code{.jaddClassPath("/gurobi801/win64/lib/gurobi.jar")}. If this is not setup properly - you are in for a world of 
pain with cryptic errors! Currently, this method does not return multiple vectors. This will be improved in a later 
version. If you want this functionality now, use the hacked-up method \code{gurobi_multiple_designs}.
}
\author{
Adam Kapelner
}
